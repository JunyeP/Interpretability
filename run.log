Using device: cuda
Using downloaded and verified file: /home/panjb/.medmnist/pathmnist.npz
Using downloaded and verified file: /home/panjb/.medmnist/pathmnist.npz
Using downloaded and verified file: /home/panjb/.medmnist/pathmnist.npz
No pretrained path specified. Using randomly initialized weights
Traceback (most recent call last):
  File "./medmnist_finetune.py", line 291, in <module>
    main() 
  File "./medmnist_finetune.py", line 279, in main
    outputs = model(images)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/panjb/inter_sample_organized/medmnist/interpretable_model.py", line 32, in forward
    soft_mask = self.mask_generator(x)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "./medmnist_finetune.py", line 164, in forward
    dec2 = self.dec2(concat2)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/container.py", line 219, in forward
    input = module(input)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py", line 176, in forward
    return F.batch_norm(
  File "/home/panjb/myenv/lib/python3.8/site-packages/torch/nn/functional.py", line 2512, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 392.00 MiB. GPU 0 has a total capacity of 10.57 GiB of which 38.19 MiB is free. Including non-PyTorch memory, this process has 10.53 GiB memory in use. Of the allocated memory 9.82 GiB is allocated by PyTorch, and 538.49 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
